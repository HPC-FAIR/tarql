# The speadsheet defining semantics of the columns:
# https://docs.google.com/spreadsheets/d/1fbQ-mRpkCmZBGqhIiuN0f4Lfq8HdJac8FyZPbMBJv9M/edit?usp=sharing
#
# Problem 1: HPC training datasets involve a lots of concepts from different domains, such as hardware, software, tools, etc.
# Solution: Instead of bring in 10+ different namespaces, we gather them under one HPC namespace.
#          Users only need to learn a single vacabulary to get started. 
#          The HPC ontology is also connected to other popular ones if users want to be exposed to more namespaces as they desire.
#
# The actual ontology is defined in the following URL
PREFIX hpc: <https://github.com/HPC-FAIR/HPC-Ontology/blob/main/hpc-ontology.owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# Using ontologies from QUDT
PREFIX qudt: <http://qudt.org/schema/qudt/> 
PREFIX unit: <http://qudt.org/vocab/unit/>

# We may use a better URL later like
# PREFIX hpc: <https://github.com/HPC-FAIR/HPC-Ontology#>

PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX tableurl: <http://example.org/rodinia-nw-lassen.csv#>


CONSTRUCT {
# the csv records labeled profling information from nvprof or nsight
#
# using table URL +row id as the URI for each record
# the variables used come with a suffix indicating their data types

  ?URI a hpc:TableRow;
    hpc:inputDataSize ?InputDataInt;
    hpc:kernel ?Kernel;
    hpc:array ?Data;
    hpc:id ?DataID;

    hpc:DRAMFreq ?DRAMFrequencyDec;
    hpc:Cycle ?ElapsedCyclesDec;
    hpc:MemberOccupancy ?MemoryOccupancyPct;
# Problem 2: timing information has different units: seconds, micoseconds, nano seconds
# Solution: we encode the value as a structured value using QUDT ontologies
    hpc:Duration [rdf:type qudt:QuantityValue ; qudt:value ?DurationFP; qudt:unit unit:NanoSEC];

    hpc:BlockSize ?BlockSizeFP;
    hpc:GridSize ?GridSizeFP;

    hpc:RegistersPerThread ?RegistersPerThreadInt;
# Problem 3: memory address
# values will be stored as string by default
# TODO: Should Memory addresses be directly supported as an independent unit type?
# Or it is just integer offset values: byte-addressable
    hpc:BeginMemoryAddress ?BeginAddr; 
    hpc:EndMemoryAddress ?EndAddr; 

    hpc:CPUPageFault ?CPUPageFaultInt; 
    hpc:GPUPageFault ?GPUPageFaultInt; 

    hpc:DeviceToHostTransfer [ rdf:type qudt:QuantityValue ; qudt:value ?DtoHFP; qudt:unit unit:KiloBYTE ];
# try to encode value + unit together using QUDT ontologies
# it is kilo byte
    hpc:HostToDeviceTransfer [ rdf:type qudt:QuantityValue ; qudt:value ?HtoDFP; qudt:unit unit:KiloBYTE ];

} 
FROM <file:rodinia_3.1_cuda_nw_labelledData-lassen-plus-rowId.csv> 

# Problem 4: automation
# Solution: TARQL. Tried a few chocies. This one works, using standard SPARQL construct query to convert.

WHERE {

# convert each column's value to an explicit types: URI, Integer, decimal, etc.

 # combine table url and row Id as the URI
  BIND (URI(CONCAT('http://example.org/rodinia-nw-lassen.csv/', ?No)) AS ?URI)

# convert inputData to integer inputDataSize
  BIND (xsd:integer(?InputData) AS ?InputDataInt)

# convert dram freq to decimal
  BIND (xsd:decimal(?DRAMFrequency) AS ?DRAMFrequencyDec)

  BIND (xsd:decimal(?ElapsedCycles) AS ?ElapsedCyclesDec)

  BIND (xsd:decimal(?MemoryPercentage) AS ?MemoryOccupancyPct)

  BIND (xsd:decimal(?Duration) AS ?DurationFP)

  BIND (xsd:decimal(?BlockSize) AS ?BlockSizeFP)
  BIND (xsd:decimal(?GridSize) AS ?GridSizeFP)

  BIND (xsd:decimal(?RegistersPerThread) AS ?RegistersPerThreadInt)

# convert page faults into integers
  BIND (xsd:integer(?CPUPageFault) AS ?CPUPageFaultInt)
  BIND (xsd:integer(?GPUPageFault) AS ?GPUPageFaultInt)

  BIND (xsd:decimal(?DtoH) AS ?DtoHFP)
  BIND (xsd:decimal(?HtoD) AS ?HtoDFP)
}
